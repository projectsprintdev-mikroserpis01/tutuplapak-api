services:
  server:
    image: nginx:stable-alpine3.19
    container_name: server
    ports:
      - "80:80"
    environment:
      - TZ=Asia/Jakarta
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - network
    restart: always

  app:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
    environment:
      - PORT=8080
      - TZ=Asia/Jakarta
    depends_on:
      db:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 2
    volumes:
      - ./data/logs:/app/data/logs
    networks:
      - network
    restart: on-failure

  db:
    image: postgres:16.1-alpine
    container_name: postgresdb
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - TZ=Asia/Jakarta
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      start_period: 5s
      interval: 15s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    environment:
      - TZ=Asia/Jakarta
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - app
    networks:
      - network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - TZ=Asia/Jakarta
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana  # Persistent storage
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
      - ./deploy/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - network
    restart: always

volumes:
  postgres:
    driver: local
  grafana_data:  # New volume for Grafana persistence
    driver: local

networks:
  network:
    driver: bridge
